import Schema from "../gen/Schema";

/**
 * {{{pkg.description}}}
 * @class
 */
class {{config.name}} {
    /**
     * API token to use for requests
     * @readonly
     * @private
     */
    readonly #token?: string;


    /**
     * API client options
     * @readonly
     * @private
     */
    readonly #options: {{config.name}}.Options;

    /**
     * Default options
     * @readonly
     * @private
     * @static
     * @internal
     */
    static readonly #defaultOptions: {{config.name}}.Options = {
        baseUrl: "{{{config.baseUrl}}}",
        autoRetry: true,
        maxRetryDelay: 5,
        maxRetries: 3
    };

    /**
     * API version
     */
    readonly #apiVersion = `{{config.apiVersion}}`;

    /**
     * Client user agent
     */
    readonly #userAgent = `{{config.instanceName}}/{{pkg.version}}`;

    /**
     * Construct a new {{config.name}} API client
     * @param token API token to use for requests
     * @param [options] Options for the API client
     */
    public constructor(token?: string, options: Partial<{{config.name}}.Options> = {{config.name}}.#defaultOptions) {
        const fullOptions = {{config.name}}.#defaultOptions;
        fullOptions.baseUrl = options.baseUrl ?? {{config.name}}.#defaultOptions.baseUrl;
        fullOptions.autoRetry = options.autoRetry ?? {{config.name}}.#defaultOptions.autoRetry;
        fullOptions.maxRetryDelay = options.maxRetryDelay ?? {{config.name}}.#defaultOptions.maxRetryDelay;
        fullOptions.maxRetries = options.maxRetries ?? {{config.name}}.#defaultOptions.maxRetries;

        this.#token = token;
        this.#options = fullOptions;
    }

    /**
     * Send a request to the API
     * @param operation The operation to call
     * @param pathParams Path parameters to use in the request
     * @param queryParams Query parameters to use in the request
     * @param body Body to use in the request
     * @internal
     * @private
     */
    async #sendRawRequest<T>(operation: Schema.Operation, pathParams: Record<string, string>, queryParams: Record<string, string>, body?: any): Promise<{{config.name}}.ApiResponse<T>> {
        const url = new URL(operation.path.replace(/^\/+/, ""), this.#options.baseUrl);
        for (const [key, value] of Object.entries(pathParams))
            url.pathname = url.pathname.replaceAll(`/:${key}`, `/${value}`);
        for (const [key, value] of Object.entries(queryParams))
            url.searchParams.append(key, value);
        const options: Record<string, any> = {
            method: operation.method,
            headers: {}
        };
        if (body && !["GET", "HEAD"].includes(operation.method)) {
            if (typeof body !== "string") {
                options.body = JSON.stringify(body);
                options.headers["Content-Type"] = "application/json";
            }
            else {
                options.body = body;
                options.headers["Content-Type"] = "text/plain";
            }
        }

        options.headers["User-Agent"] = this.#userAgent;

        if (this.#token && operation.token !== undefined)
            options.headers["Authorization"] = `Bearer ${this.#token}`;
        if (operation.token !== undefined)
            options.credentials = "include";
        const response = await fetch(url.toString(), options);
        if (response.status === 204) return undefined as any;
        const text = await response.text();
        let data: T;
        if (response.headers.get("Content-Type")?.startsWith("application/json")) {
            data = JSON.parse(text, (_key, value) => {
                // parse dates
                if (/^\d{4}-\d{2}-\d{2}T(?:\d{2}:){2}\d{2}(?:\.\d+)?(?:[a-zA-Z]+|\+\d{2}:\d{2})?$/.test(value))
                    return new Date(value);
                return value;
            });
        }
        else data = text as any;
        const res = {{config.name}}.makeApiResponse(data, new {{config.name}}.RawResponse(response, {operation, pathParams, queryParams, body} as const));
        if (response.ok) return res;
        else throw res;
    }

    /**
     * Send a request to the API with support for auto-retry
     * @param operation The operation to call
     * @param pathParams Path parameters to use in the request
     * @param queryParams Query parameters to use in the request
     * @param options API client options. Overrides the client's options
     * @internal
     * @private
     */
    #sendRequest<T>(operation: Schema.Operation, pathParams: Record<string, string>, queryParams: Record<string, string>, body?: any, options?: {{config.name}}.Options): Promise<{{config.name}}.ApiResponse<T>> {
        return new Promise(async (resolve, reject) => {
            const send = (i: number = 0) => {
                this.#sendRawRequest<T>(operation, pathParams, queryParams, body)
                    .then(response => resolve(response))
                    .catch(e => {
                        options ??= this.#options;
                        options.baseUrl ??= this.#options.baseUrl;
                        options.autoRetry ??= this.#options.autoRetry;
                        options.maxRetries ??= this.#options.maxRetries;
                        options.maxRetryDelay ??= this.#options.maxRetryDelay;

                        if (options.autoRetry && i < options.maxRetries && e instanceof {{config.name}}.R.ApiResponse) {
                            const res: {{config.name}}.R.ApiResponse = e;
                            const retryAfter: number = Number(res._response.status !== 429 ? res._response.headers["x-retry-after"] ?? res._response.headers["retry-after"] : res._response.headers["x-ratelimit-reset"] ?? res._response.headers["x-rate-limit-reset"] ?? res._response.headers["ratelimit-reset"] ?? res._response.headers["rate-limit-reset"] ?? res._response.headers["retry-after"] ?? res._response.headers["x-retry-after"]);
                            if (Number.isNaN(retryAfter) || retryAfter > options.maxRetryDelay) return reject(e);
                            setTimeout(send, Number(retryAfter) * 1000, ++i);
                        }
                        else reject(e);
                    });
            }
            send(0);
        });
    }

    /**
     * Compare versions to determine compatibility
     * @param a First version
     * @param b Second version
     */
    #compareVersions(a: string, b: string): Cloudnode.CompatibilityStatus {
        const partsA = a.split(".");
        const partsB = b.split(".");

        const verA = [partsA[0] || "0", partsA[1] || "0"];
        const verB = [partsB[0] || "0", partsB[1] || "0"];

        if (verA[0] !== verB[0]) return Cloudnode.CompatibilityStatus.INCOMPATIBLE;
        if (verA[1] !== verB[1]) return Cloudnode.CompatibilityStatus.OUTDATED;
        return Cloudnode.CompatibilityStatus.COMPATIBLE;
    }

    /**
     * Check compatibility with the API
     */
    public async checkCompatibility() {
        const data: any = await (await fetch(new URL("../", this.#options.baseUrl).toString(), {
            method: "GET",
            headers: {
                "User-Agent": this.#userAgent
            }
        })).json();
        return this.#compareVersions(data.version, this.#apiVersion);
    }

    /**
     * Get another page of paginated results
     * @param response Response to get a different page of
     * @param page Page to get
     * @returns The new page or null if the page is out of bounds
     * @throws {Cloudnode.Error} Error returned by the API
     */
    async getPage<T>(response: {{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>>, page: number): Promise<{{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>> | null> {
        if (page * response.limit > response.total || page < 1) return null;
        const query = Object.assign({}, response._response.request.queryParams);
        query.page = page.toString();
        return await this.#sendRequest(response._response.request.operation, response._response.request.pathParams, query, response._response.request.body);
    }

    /**
     * Get next page of paginated results
     * @param response Response to get the next page of
     * @returns The next page or null if this is the last page
     * @throws {Cloudnode.Error} Error returned by the API
     */
    async getNextPage<T>(response: {{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>>): Promise<{{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>> | null> {
        return await this.getPage(response, response.page + 1);
    }

    /**
     * Get previous page of paginated results
     * @param response Response to get the previous page of
     * @returns The previous page or null if this is the first page
     * @throws {Cloudnode.Error} Error returned by the API
     */
    async getPreviousPage<T>(response: {{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>>): Promise<{{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>> | null> {
        return await this.getPage(response, response.page - 1);
    }

    /**
     * Get all other pages of paginated results and return the complete data
     * > **Warning:** Depending on the amount of data, this can take a long time and use a lot of memory.
     * @param response Response to get all pages of
     * @returns All of the data in 1 page
     * @throws {Cloudnode.Error} Error returned by the API
     */
    async getAllPages<T>(response: {{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>>): Promise<{{config.name}}.PaginatedData<T>> {
        const pages: (true | null)[] = new Array(Math.ceil(response.total / response.limit)).fill(null);
        pages[response.page - 1] = true;
        const promises: (Promise<{{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>> | null> | true)[] = pages.map((page, i) => page === null ? this.getPage(response, i + 1) : true);
        const newPages = await Promise.all(promises.filter(page => page !== true));
        newPages.splice(response.page - 1, 0, response);
        const allPages = newPages.filter(p => p !== null) as {{config.name}}.ApiResponse<{{config.name}}.PaginatedData<T>>[];
        return {
            items: allPages.map(p => p.items).flat(),
            total: response.total,
            limit: response.limit,
            page: 1
        };
    }

    {{#namespaces}}
    public {{name}} = {
        {{#operations}}
        /**
         * {{{description}}}
         * @{{method}} {{{path}}}
         {{#allParams}}
         * @param {{name}} {{{description}}}
         {{/allParams}}
         {{#throws}}
         {{=<% %>=}}
         * @throws {<%& . %>}
         <%={{ }}=%>
         {{/throws}}
         {{#returnDescription}}
         * @returns {{{returnDescription}}}
         {{/returnDescription}}
         */
         {{name}}: async ({{{tsArgs}}}): Promise<{{config.name}}.ApiResponse<{{{returnType}}}>> => {
            return await this.#sendRequest<{{{returnType}}}>({{{operation}}}, {{{params.path}}}, {{{params.query}}}, {{{params.body}}});
         },
        {{/operations}}
    } as const;
    {{/namespaces}}

    {{#operations}}
    /**
     * {{{description}}}
     * @{{method}} {{{path}}}
     {{#allParams}}
     * @param {{name}} {{{description}}}
     {{/allParams}}
     {{#throws}}
     {{=<% %>=}}
     * @throws {<%& . %>}
     <%={{ }}=%>
     {{/throws}}
     {{#returnDescription}}
     * @returns {{{returnDescription}}}
     {{/returnDescription}}
     */
     public async {{name}}({{{tsArgs}}}): Promise<{{config.name}}.ApiResponse<{{{returnType}}}>> {
        return await this.#sendRequest<{{{returnType}}}>({{{operation}}}, {{{params.path}}}, {{{params.query}}}, {{{params.body}}});
     };
    {{/operations}}
}

namespace {{config.name}} {
    {{#schema.models}}
    /**
     * {{{description}}}
     */
    export interface {{name}} {
        {{#fields}}
        /**
         * {{{description}}}
         */
        {{name}}: {{{type}}};
        {{/fields}}
    }
    {{/schema.models}}

    /**
     * Paginated response
     */
    export interface PaginatedData<T> {
        /**
         * The page items
         */
        items: T[];
        /**
         * The total number of items
         */
        total: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The current page number
         */
        page: number;
    }

    export class RawResponse {
        /**
         * The headers returned by the server.
         * @readonly
         */
        public readonly headers: Record<string, string>;

        /**
         * A boolean indicating whether the response was successful (status in the range `200` – `299`) or not.
         */
        public readonly ok: boolean

        /**
         * Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry).
         */
        public readonly redirected: boolean;

        /**
         * The status code of the response.
         * @readonly
         */
        public readonly status: number;

        /**
         * The status message corresponding to the status code. (e.g., `OK` for `200`).
         * @readonly
         */
        public readonly statusText: string;

        /**
         * The URL of the response.
         */
        public readonly url: URL;

        /**
         * The request params
         * @readonly
         */
        public readonly request: {
            readonly operation: Schema.Operation;
            readonly pathParams: Record<string, string>;
            readonly queryParams: Record<string, string>;
            readonly body: any;
        };

        public constructor(response: Response, request: {operation: Schema.Operation, pathParams: Record<string, string>, queryParams: Record<string, string>, body: any}) {
            this.headers = Object.fromEntries([...response.headers.entries()].map(([k, v]) => [k.toLowerCase(), v]));
            this.ok = response.ok;
            this.redirected = response.redirected;
            this.status = response.status;
            this.statusText = response.statusText;
            this.url = new URL(response.url);
            this.request = request;
        }
    }

    export namespace R {
        export class ApiResponse {
            /**
             * API response
             * @readonly
             * @private
             */
            readonly #response: RawResponse;

            public constructor(response: RawResponse) {
                this.#response = response;
            }

            /**
             * API response
             * @readonly
             */
            public get _response(): RawResponse {
                return this.#response;
            }
        }
    }

    export type ApiResponse<T> = T & R.ApiResponse;

    export function makeApiResponse<T>(data: T, response: RawResponse): ApiResponse<T> {
        return Object.assign(new R.ApiResponse(response), data);
    }

    /**
     * API client options
     */
    export interface Options {
        /**
         * The base URL of the API
         */
        baseUrl: string;

        /**
         * Whether to automatically retry requests that fail temporarily.
         * If enabled, when a request fails due to a temporary error, such as a rate limit, the request will be retried after the specified delay.
         */
        autoRetry: boolean;

        /**
         * The maximum number of seconds that is acceptable to wait before retrying a failed request.
         * This requires {@link Options.autoRetry} to be enabled.
         */
        maxRetryDelay: number;

        /**
         * The maximum number of times to retry a failed request.
         * This requires {@link Options.autoRetry} to be enabled.
         */
        maxRetries: number;
    }

    /**
     * API client compatibility status
     */
    export enum CompatibilityStatus {
        /**
         * Fully compatible (API patch version may differ)
         */
        COMPATIBLE = "compatible",

        /**
         * Compatible, but outdated (i.e. existing APIs will work, but you are missing out on new features).
         */
        OUTDATED = "outdated",

        /**
         * API has implemented breaking changes which are not compatible with this client.
         */
        INCOMPATIBLE = "incompatible",
    }
}

export default {{config.name}};
