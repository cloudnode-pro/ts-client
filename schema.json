{
  "models": [
    {
      "name": "Error",
      "description": "An API error response.",
      "fields": [
        {
          "name": "message",
          "description": "A human-readable description of this error",
          "type": "string"
        },
        {
          "name": "code",
          "description": "Error code",
          "type": "string"
        },
        {
          "name": "fields",
          "description": "Affected request fields. The key is the name of the input parameter (e.g. from the request body or query string) and the value is a human-readable error message for that field.",
          "type": "Record<string, string | Record<string, string>>"
        }
      ]
    },
    {
      "name": "NewsletterData",
      "description": "A data field that is required to subscribe to this newsletter",
      "fields": [
        {
          "name": "name",
          "description": "The name of the field",
          "type": "string"
        },
        {
          "name": "description",
          "description": "Description of the field",
          "type": "string | undefined"
        },
        {
          "name": "type",
          "description": "The type of data",
          "type": "\"string\" | \"number\" | \"boolean\""
        },
        {
          "name": "required",
          "description": "Whether this field is required",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "Newsletter",
      "description": "A newsletter that you can subscribe to",
      "fields": [
        {
          "name": "id",
          "description": "The unique identifier for this newsletter",
          "type": "string"
        },
        {
          "name": "name",
          "description": "The name of this newsletter",
          "type": "string"
        },
        {
          "name": "data",
          "description": "Additional data that is required to subscribe to this newsletter",
          "type": "Record<string, NewsletterData>"
        }
      ]
    },
    {
      "name": "NewsletterSubscription",
      "description": "Your subscription to a newsletter",
      "fields": [
        {
          "name": "id",
          "description": "The ID of the subscription. Can be used to unsubscribe.",
          "type": "string"
        },
        {
          "name": "email",
          "description": "The email address of the subscriber",
          "type": "string"
        },
        {
          "name": "newsletter",
          "description": "The ID of the newsletter that was subscribed to",
          "type": "string"
        }
      ]
    },
    {
      "name": "DatedNewsletterSubscription",
      "description": "A newsletter subscription with a creation date",
      "fields": [
        {
          "name": "id",
          "description": "The ID of the subscription. Can be used to unsubscribe.",
          "type": "string"
        },
        {
          "name": "email",
          "description": "The email address of the subscriber",
          "type": "string"
        },
        {
          "name": "newsletter",
          "description": "The ID of the newsletter that was subscribed to",
          "type": "string"
        },
        {
          "name": "date",
          "description": "The date the subscription was created",
          "type": "Date"
        }
      ]
    },
    {
      "name": "PartialToken",
      "description": "A token, however, the `permissions` field is not included",
      "fields": [
        {
          "name": "id",
          "description": "The ID or key of the token",
          "type": "string"
        },
        {
          "name": "created",
          "description": "Date and time when this token was created",
          "type": "Date"
        },
        {
          "name": "expires",
          "description": "Date and time when this token expires. Null if it never expires.",
          "type": "Date | null"
        },
        {
          "name": "internal",
          "description": "Whether this token is for internal use only, e.g. to power a session. In other words, an internal token is one that was **not** created by the client.",
          "type": "string | undefined"
        },
        {
          "name": "metadata",
          "description": "Additional metadata about this token",
          "type": "TokenMetadata"
        }
      ]
    },
    {
      "name": "Token",
      "description": "An authentication token",
      "fields": [
        {
          "name": "id",
          "description": "The ID or key of the token",
          "type": "string"
        },
        {
          "name": "created",
          "description": "Date and time when this token was created",
          "type": "Date"
        },
        {
          "name": "expires",
          "description": "Date and time when this token expires. Null if it never expires.",
          "type": "Date | null"
        },
        {
          "name": "permissions",
          "description": "Permission scopes that this token holds",
          "type": "string[]"
        },
        {
          "name": "internal",
          "description": "Whether this token is for internal use only, e.g. to power a session. In other words, an internal token is one that was **not** created by the client.",
          "type": "string | undefined"
        },
        {
          "name": "metadata",
          "description": "Additional metadata about this token",
          "type": "TokenMetadata"
        }
      ]
    },
    {
      "name": "TokenMetadata",
      "description": "Token metadata",
      "fields": [
        {
          "name": "note",
          "description": "A user-supplied note for this token",
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "AccountIdentity",
      "description": "Personal information associated with your account",
      "fields": [
        {
          "name": "username",
          "description": "Your unique username",
          "type": "string"
        },
        {
          "name": "name",
          "description": "Your name",
          "type": "string | null"
        }
      ]
    },
    {
      "name": "PrimaryEmail",
      "description": "Your current primary account e-mail address",
      "fields": [
        {
          "name": "id",
          "description": "The ID of the e-mail address",
          "type": "string"
        },
        {
          "name": "address",
          "description": "Your primary e-mail address. May ben null if anonymised.",
          "type": "string | null"
        },
        {
          "name": "verified",
          "description": "Whether this e-mail address has been verified",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "DatedPrimaryEmail",
      "description": "Your current primary account e-mail address with a timestamp of when it was added to your account",
      "fields": [
        {
          "name": "id",
          "description": "The ID of the e-mail address",
          "type": "string"
        },
        {
          "name": "address",
          "description": "Your e-mail address. May ben null if anonymised.",
          "type": "string | null"
        },
        {
          "name": "verified",
          "description": "Whether this e-mail address has been verified",
          "type": "boolean"
        },
        {
          "name": "added",
          "description": "The date and time when this e-mail address was added to your account",
          "type": "Date"
        }
      ]
    },
    {
      "name": "AccountEmail",
      "description": "An e-mail address you have added to your account",
      "fields": [
        {
          "name": "id",
          "description": "The ID of the e-mail address",
          "type": "string"
        },
        {
          "name": "address",
          "description": "Your e-mail address. May ben null if anonymised.",
          "type": "string | null"
        },
        {
          "name": "verified",
          "description": "Whether this e-mail address has been verified",
          "type": "boolean"
        },
        {
          "name": "primary",
          "description": "Whether this e-mail address is your primary e-mail address",
          "type": "boolean"
        },
        {
          "name": "added",
          "description": "The date and time when this e-mail address was added to your account",
          "type": "Date"
        }
      ]
    },
    {
      "name": "AccountDetails",
      "description": "Details about your account",
      "fields": [
        {
          "name": "id",
          "description": "Your user ID",
          "type": "string"
        },
        {
          "name": "password",
          "description": "Whether you have a password set",
          "type": "boolean"
        },
        {
          "name": "group",
          "description": "The name of your permission group",
          "type": "string"
        },
        {
          "name": "permissions",
          "description": "A list of all permission that you have access to",
          "type": "string[]"
        },
        {
          "name": "identity",
          "description": "Personal information associated with your account. Requires `account.details.identity` to see. Maybe be null if the account is anonymised or you don't have permission to access the account identity.",
          "type": "AccountIdentity | null"
        },
        {
          "name": "email",
          "description": "Your current primary account e-mail address. Requires `account.details.email` to see. Maybe be null if you don't have a primary e-mail address or you don't have permission to access the account's e-mail address.",
          "type": "PrimaryEmail | null"
        }
      ]
    },
    {
      "name": "Permission",
      "description": "A permission node",
      "fields": [
        {
          "name": "permission",
          "description": "The permission node string",
          "type": "string"
        },
        {
          "name": "description",
          "description": "User-friendly description of the permission node",
          "type": "string"
        },
        {
          "name": "note",
          "description": "Additional user-friendly information about the permission node",
          "type": "string | null"
        },
        {
          "name": "group",
          "description": "A group/category title that can be used to group permissions together",
          "type": "string | null"
        }
      ]
    }
  ],
  "operations": {
    "newsletter": {
      "type": "namespace",
      "operations": {
        "list": {
          "type": "operation",
          "description": "List newsletters",
          "method": "GET",
          "path": "/newsletter",
          "parameters": {
            "query": {
              "limit": {
                "description": "The number of newsletters to return per page. No more than 50.",
                "default": "10",
                "type": "number",
                "required": false
              },
              "page": {
                "description": "The page number. No more than 2³² (4294967296).",
                "default": "1",
                "type": "number",
                "required": false
              }
            }
          },
          "returns": [
            {
              "status": 200,
              "type": "Newsletter[]"
            }
          ]
        },
        "get": {
          "type": "operation",
          "description": "Get newsletter",
          "method": "GET",
          "path": "/newsletter/:id",
          "parameters": {
            "path": {
              "id": {
                "description": "A newsletter ID",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 200,
              "type": "Newsletter"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            }
          ]
        },
        "subscribe": {
          "type": "operation",
          "description": "Subscribe to newsletter",
          "method": "POST",
          "path": "/newsletter/:id/subscribe",
          "parameters": {
            "path": {
              "id": {
                "description": "A newsletter ID",
                "type": "string",
                "required": true
              }
            },
            "body": {
              "email": {
                "description": "Subscriber's email address",
                "type": "string",
                "required": true
              },
              "data": {
                "description": "Additional data that this newsletter requires",
                "type": "Record<string, string | number | boolean>",
                "required": false
              }
            }
          },
          "returns": [
            {
              "status": 201,
              "type": "NewsletterSubscription"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            },
            {
              "status": 409,
              "type": "Error & {code: \"CONFLICT\"}"
            }
          ]
        }
      }
    },
    "newsletters": {
      "type": "namespace",
      "operations": {
        "unsubscribe": {
          "type": "operation",
          "description": "Revoke a subscription (unsubscribe)",
          "method": "POST",
          "path": "/newsletters/unsubscribe",
          "parameters": {
            "body": {
              "subscription": {
                "description": "The ID of the subscription to revoke",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 204,
              "type": "void"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        },
        "listSubscriptions": {
          "type": "operation",
          "description": "List subscriptions of the authenticated user",
          "token": "newsletter.subscriptions.list.own",
          "method": "GET",
          "path": "/newsletters/subscriptions",
          "parameters": {
            "query": {
              "limit": {
                "description": "The number of subscriptions to return per page. No more than 50.",
                "default": "10",
                "type": "number",
                "required": false
              },
              "page": {
                "description": "The page number. No more than 2³² (4294967296).",
                "default": "1",
                "type": "number",
                "required": false
              }
            }
          },
          "returns": [
            {
              "status": 200,
              "type": "DatedNewsletterSubscription[]"
            }
          ]
        }
      }
    },
    "token": {
      "type": "namespace",
      "operations": {
        "list": {
          "type": "operation",
          "description": "List tokens of user",
          "token": "tokens.list.own",
          "method": "GET",
          "path": "/token",
          "parameters": {
            "query": {
              "limit": {
                "description": "The number of tokens to return per page. No more than 50.",
                "default": "10",
                "type": "number",
                "required": false
              },
              "page": {
                "description": "The page number. No more than 2³² (4294967296).",
                "default": "1",
                "type": "number",
                "required": false
              },
              "internal": {
                "description": "Internal tokens are returned as well if this parameter is present.",
                "type": "any",
                "required": false
              }
            }
          },
          "returns": [
            {
              "status": 200,
              "type": "PartialToken[]"
            }
          ]
        },
        "create": {
          "type": "operation",
          "description": "Create token",
          "token": "tokens.create.own",
          "method": "POST",
          "path": "/token",
          "parameters": {
            "body": {
              "permissions": {
                "description": "List of permissions to grant to the token. You must already have each of these permissions with your current token.",
                "type": "string[]",
                "required": true
              },
              "lifetime": {
                "description": "Lifetime of the token in seconds. If null, the token will never expire (not recommended). Max: 31560000 (1 year). Min: 60 (1 minute).",
                "type": "number",
                "required": true
              },
              "note": {
                "description": "A user-specified note to label the token. Max length: 2⁸ (256) characters.",
                "type": "string",
                "required": false
              }
            }
          },
          "returns": [
            {
              "status": 201,
              "type": "Token"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        },
        "get": {
          "type": "operation",
          "description": "Get token details",
          "token": "tokens.get.own",
          "method": "GET",
          "path": "/token/:id",
          "parameters": {
            "path": {
              "id": {
                "description": "The ID of the token to get. Specify `current` to get information about the token that was used to authenticate the request.",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 200,
              "type": "Token"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        },
        "revoke": {
          "type": "operation",
          "description": "Revoke token",
          "token": "tokens.revoke.own",
          "method": "DELETE",
          "path": "/token/:id",
          "parameters": {
            "path": {
              "id": {
                "description": "The ID of the token to revoke. Specify `current` to revoke the token that was used to authenticate the request.",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 204,
              "type": "void"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            },
            {
              "status": 400,
              "type": "Error & {code: \"MODIFICATION_NOT_ALLOWED\"}"
            }
          ]
        }
      }
    },
    "tokens": {
      "type": "namespace",
      "operations": {
        "refresh": {
          "type": "operation",
          "description": "Refresh current token. The token that was used to authenticate the request will be deleted. A new token with a new ID but the same permissions will be created and returned. The lifespan of the new token will be the same as the old one, starting from the time of the request. This operation effectively allows a token to be used indefinitely.",
          "token": "token.refresh",
          "method": "POST",
          "path": "/token/refresh",
          "parameters": {},
          "returns": [
            {
              "status": 201,
              "type": "Token"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        }
      }
    },
    "auth": {
      "type": "namespace",
      "operations": {
        "register": {
          "type": "operation",
          "description": "Create an account and session. After signing up, a welcome e-mail is sent to confirm your e-mail address.\n\n> **Note**: Registering an account can only be performed from residential IP. Proxying this endpoint will likely not work. Creating multiple/alternate accounts is not allowed as per the Terms of Service.",
          "method": "POST",
          "path": "/auth/register",
          "parameters": {
            "body": {
              "username": {
                "description": "The username to use for the account. Must be between 3 and 32 characters long. Cannot start with `user_`. May contain only letters, numbers, dashes and underscores. Must be unique.",
                "type": "string",
                "required": true
              },
              "email": {
                "description": "The e-mail address to register. A valid unique non-disposable e-mail that can receive mail is required.",
                "type": "string",
                "required": true
              },
              "password": {
                "description": "The password to use for the account. Must be at least 15 characters, or 8 characters if it contains a mix of letters, numbers and symbols.",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 201,
              "type": "{session: string}",
              "description": "Session token. Also returned in `Set-Cookie` header."
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            },
            {
              "status": 403,
              "type": "Error & {code: \"IP_REJECTED\"}"
            }
          ]
        },
        "login": {
          "type": "operation",
          "description": "Create a session using user ID/username/e-mail and password.\n\n> **Note**: Logging in can only be performed from residential IP. Proxying this endpoint will likely not work. It is normally not recommended to use this endpoint to gain API access. Instead, create a token from your account to use with the API.",
          "method": "POST",
          "path": "/auth/login",
          "parameters": {
            "body": {
              "user": {
                "description": "User ID (starts with `user_`), username or e-mail address.",
                "type": "string",
                "required": true
              },
              "password": {
                "description": "The password of the account.",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 201,
              "type": "{session: string}",
              "description": "Session token. Also returned in `Set-Cookie` header."
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            },
            {
              "status": 403,
              "type": "Error & {code: \"IP_REJECTED\"}"
            }
          ]
        }
      }
    },
    "account": {
      "type": "namespace",
      "operations": {
        "get": {
          "type": "operation",
          "description": "Get account details",
          "token": "account.details",
          "method": "GET",
          "path": "/account",
          "parameters": {},
          "returns": [
            {
              "status": 200,
              "type": "AccountDetails"
            }
          ]
        },
        "getIdentity": {
          "type": "operation",
          "description": "Get account identity",
          "token": "account.details.identity",
          "method": "GET",
          "path": "/account/identity",
          "parameters": {},
          "returns": [
            {
              "status": 200,
              "type": "AccountIdentity"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            }
          ]
        },
        "updateIdentity": {
          "type": "operation",
          "description": "Update account identity",
          "token": "account.details.identity.update",
          "method": "PATCH",
          "path": "/account/identity",
          "parameters": {
            "body": {
              "username": {
                "description": "Your unique username. Between 3 and 64 characters. Only letters, numbers, dashes and underscores. May not start with `user_`.",
                "type": "string",
                "required": true
              },
              "name": {
                "description": "Your full name. Set to `null` to remove.",
                "type": "string | null",
                "required": false
              }
            }
          },
          "returns": [
            {
              "status": 200,
              "type": "AccountIdentity"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            },
            {
              "status": 409,
              "type": "Error & {code: \"CONFLICT\"}"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        },
        "replaceIdentity": {
          "type": "operation",
          "description": "Replace account identity",
          "token": "account.details.identity.update",
          "method": "PUT",
          "path": "/account/identity",
          "parameters": {
            "body": {
              "username": {
                "description": "Your unique username. Between 3 and 64 characters. Only letters, numbers, dashes and underscores. May not start with `user_`.",
                "type": "string",
                "required": true
              },
              "name": {
                "description": "Your full name. Set to `null` to remove.",
                "type": "string | null",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 200,
              "type": "AccountIdentity"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            },
            {
              "status": 409,
              "type": "Error & {code: \"CONFLICT\"}"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        },
        "listEmails": {
          "type": "operation",
          "description": "List account e-mail addresses",
          "token": "account.details.email.list",
          "method": "GET",
          "path": "/account/email",
          "parameters": {},
          "returns": [
            {
              "status": 200,
              "type": "AccountEmail[]"
            }
          ]
        },
        "getEmail": {
          "type": "operation",
          "description": "Get your primary e-mail address",
          "token": "account.details.email",
          "method": "GET",
          "path": "/account/email/primary",
          "parameters": {},
          "returns": [
            {
              "status": 200,
              "type": "DatedPrimaryEmail"
            },
            {
              "status": 404,
              "type": "Error & {code: \"RESOURCE_NOT_FOUND\"}"
            }
          ]
        },
        "setEmail": {
          "type": "operation",
          "description": "Set your primary e-mail address",
          "token": "account.details.email.update",
          "method": "PUT",
          "path": "/account/email/primary",
          "parameters": {
            "body": {
              "email": {
                "description": "E-mail address to set as primary.",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 204,
              "type": "void"
            },
            {
              "status": 409,
              "type": "Error & {code: \"CONFLICT\"}"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        },
        "changePassword": {
          "type": "operation",
          "description": "Change account password",
          "token": "account.details.password.update",
          "method": "PUT",
          "path": "/account/password",
          "parameters": {
            "body": {
              "currentPassword": {
                "description": "Your current password.",
                "type": "string",
                "required": true
              },
              "newPassword": {
                "description": "The new password. Must be at least 15 characters, or 8 characters if it contains a mix of letters, numbers and symbols.",
                "type": "string",
                "required": true
              }
            }
          },
          "returns": [
            {
              "status": 204,
              "type": "void"
            },
            {
              "status": 422,
              "type": "Error & {code: \"INVALID_DATA\"}"
            }
          ]
        },
        "listPermissions": {
          "type": "operation",
          "description": "List account permissions with user-friendly descriptions. Some permissions (such as wildcard ones) may be excluded in this list if they don't have a description.",
          "token": "account.details",
          "method": "GET",
          "path": "/account/permissions",
          "parameters": {},
          "returns": [
            {
              "status": 200,
              "type": "Permission[]"
            }
          ]
        }
      }
    }
  }
}
